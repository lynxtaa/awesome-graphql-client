import gql from 'graphql-tag'
import { GetStaticProps } from 'next'
import { useState } from 'react'

import useQuery from '../hooks/useQuery'
// Types generated by running: npm run generate:types
import { GetCountries, GetCountriesVariables } from '../lib/gql-queries'
import graphQLClient from '../lib/graphQLClient'

const GET_COUNTRIES = gql`
	query GetCountries($nameStartsWith: String) {
		Country(filter: { name_starts_with: $nameStartsWith }) {
			alpha2Code
			name
		}
	}
`

type Props = {
	initialData: GetCountries
}

export default function Home({ initialData }: Props) {
	const [filter, setFilter] = useState('')

	const { data, error } = useQuery<GetCountries, GetCountriesVariables>(
		GET_COUNTRIES,
		{ nameStartsWith: filter },
		{
			initialData: filter ? undefined : initialData,
			revalidateOnMount: true,
		},
	)

	if (error) {
		return <div>Error: {error.message}</div>
	}

	return (
		<div>
			<input value={filter} onChange={(event) => setFilter(event.target.value)} />
			{data ? (
				<ul>
					{data.Country!.map((country) => (
						<li key={country!.alpha2Code}>{country!.name}</li>
					))}
				</ul>
			) : (
				<div>Loading...</div>
			)}
		</div>
	)
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const initialData = await graphQLClient.request<GetCountries>(GET_COUNTRIES)

	return {
		props: { initialData },
	}
}

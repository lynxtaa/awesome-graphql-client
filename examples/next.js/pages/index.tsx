import gql from 'graphql-tag'
import { GetStaticProps } from 'next'
import { useState } from 'react'

import useQuery from '../hooks/useQuery'
// Types generated by running: npm run generate:types
import { GetCharacters, GetCharactersVariables } from '../lib/gql-queries'
import graphQLClient from '../lib/graphQLClient'

const GET_CHARACTERS = gql`
	query GetCharacters($name: String) {
		characters(filter: { name: $name }) {
			results {
				id
				name
			}
		}
	}
`

type Props = {
	initialData: GetCharacters
}

export default function Home({ initialData }: Props) {
	const [filter, setFilter] = useState('')

	const { data, error } = useQuery<GetCharacters, GetCharactersVariables>(
		GET_CHARACTERS,
		{ name: filter },
		{
			initialData: filter ? undefined : initialData,
			revalidateOnMount: true,
		},
	)

	return (
		<div>
			<input
				value={filter}
				onChange={(event) => setFilter(event.target.value)}
				placeholder="Enter name"
			/>
			{data ? (
				<ul>
					{data.characters!.results!.map((character, i) => (
						<li key={character!.id || i}>{character!.name}</li>
					))}
				</ul>
			) : error ? (
				<div>Error: {error.message}</div>
			) : (
				<div>Loading...</div>
			)}
		</div>
	)
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const initialData = await graphQLClient.request<GetCharacters>(GET_CHARACTERS)

	return {
		props: { initialData },
	}
}
